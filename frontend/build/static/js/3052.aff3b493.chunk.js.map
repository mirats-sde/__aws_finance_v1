{"version":3,"file":"static/js/3052.aff3b493.chunk.js","mappings":"0MA6GA,UAxGgB,WACd,OAAkCA,EAAAA,EAAAA,UAAS,MAAK,eAAzCC,EAAS,KAAEC,EAAY,KAC9B,GAAkCF,EAAAA,EAAAA,UAAS,IAAG,eAAvCG,EAAS,KAAc,KAC9B,SAASC,EAAWC,GAClB,IAAIC,EAAQD,EAAKC,MAAM,KAEvB,OADQ,IAAIC,KAAK,GAAD,OAAID,EAAM,GAAE,YAAIA,EAAM,GAAE,YAAIA,EAAM,KAAME,UAE1D,CACA,IAAMC,EAAY,yCAAG,WAAOC,GAAC,sFACC,OAAxBC,EAAOD,EAAEE,OAAOC,MAAM,GAAG,EAAD,OACTF,EAAKG,cAAc,KAAD,EAA/BC,EAAI,OACNC,GAAKC,EAAAA,EAAAA,IAAKF,GAOdG,QAAQC,IAAIH,EAAGI,QACfF,QAAQC,IAAIH,EAAGK,YACXC,EAAS,GAEA,QAAb,EAAAN,EAAGK,kBAAU,OAAb,EAAeE,KAAI,SAACC,EAAQC,GAAO,IAAD,EACW,QAA3C,EAAAC,OAAOC,QAAQX,EAAGI,OAAOJ,EAAGK,WAAWI,YAAI,OAA3C,EAA6CF,KAAI,WAAeK,GAAS,IAAD,eAAlB,KAAO,MAE3DC,EAAYC,EAAAA,GAAAA,cAAoBd,EAAGI,OAAOI,KAChCO,QACVF,EAAUE,OACZ,IACAT,EAAOU,KAAI,MAAXV,GAAM,OAASO,GACjB,IACAX,QAAQC,IAAIG,GACZpB,EAAaoB,GAAQ,4CACtB,gBAzBiB,sCAmDlB,OARAJ,QAAQC,IAAIhB,IASV,4BACE,kBAAO8B,KAAK,OAAOC,SAAUzB,KAC7B,mBAAQ0B,QA5BO,WACR,OAATlC,QAAS,IAATA,GAAAA,EAAWsB,KAAI,SAACR,EAAMU,GACpBW,IAAAA,KACE,oEACA,CACEC,eAAoB,OAAJtB,QAAI,IAAJA,OAAI,EAAJA,EAAMuB,QACtBC,WAAYnC,EAAe,OAAJW,QAAI,IAAJA,OAAI,EAAJA,EAAMyB,WAC7BC,gBAAqB,OAAJ1B,QAAI,IAAJA,OAAI,EAAJA,EAAMyB,UACvBE,UAAe,OAAJ3B,QAAI,IAAJA,OAAI,EAAJA,EAAM4B,UACjBC,YAAiB,OAAJ7B,QAAI,IAAJA,OAAI,EAAJA,EAAM8B,UACnBC,MAAW,OAAJ/B,QAAI,IAAJA,OAAI,EAAJA,EAAMgC,UACbC,mBAAwB,OAAJjC,QAAI,IAAJA,OAAI,EAAJA,EAAMkC,UAC1BC,kBAAuB,OAAJnC,QAAI,IAAJA,OAAI,EAAJA,EAAMoC,WAG/B,GACF,EAYgC,mBAC5B,8BACE,8BACE,iCACA,4CACA,wCACA,6CACA,uCACA,yCACA,mCACA,qDACA,uDAEF,2BACY,OAATlD,QAAS,IAATA,OAAS,EAATA,EAAWsB,KAAI,SAACR,GAAI,OACnB,2BACE,8BAAU,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAO,0BACb,wBAAKA,EAAKuB,WACV,wBAOGlC,EAAe,OAAJW,QAAI,IAAJA,OAAI,EAAJA,EAAMyB,cAGpB,wBAAKzB,EAAKyB,aACV,wBAAKzB,EAAK4B,aACV,wBAAK5B,EAAK8B,aACV,wBAAK9B,EAAKgC,aACV,wBAAKhC,EAAKkC,aACV,wBAAKlC,EAAKoC,cACP,WAMjB,C","sources":["pages/covert/Convert.js"],"sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { read, utils } from \"xlsx\";\nconst Convert = () => {\n  const [tableData, setTableData] = useState(null);\n  const [exceldata, setExceldata] = useState([]);\n  function formatDate(date) {\n    let split = date.split(\"/\");\n    var t = new Date(`${split[1]},${split[0]},${split[2]}`).toString();\n    return t;\n  }\n  const handleChange = async (e) => {\n    let file = e.target.files[0];\n    const data = await file.arrayBuffer();\n    let wb = read(data);\n    // Object.entries(wb.Sheets[wb.SheetNames])?.map(([key, value], i) => {\n    //   console.log(\"key=>\", key);\n    //   console.log(\"value=>\", value);\n    //   let jsonExcel = utils.sheet_to_json(value);\n    //   console.log(jsonExcel);\n    // });\n    console.log(wb.Sheets);\n    console.log(wb.SheetNames);\n    let sheets = [];\n    let jsonExcel;\n    wb.SheetNames?.map((shName, i) => {\n      Object.entries(wb.Sheets[wb.SheetNames[i]])?.map(([key, value], ind) => {\n        // console.log(utils.sheet_to_json(wb.Sheets[shName]));\n        jsonExcel = utils.sheet_to_json(wb.Sheets[shName]);\n        jsonExcel.shift();\n        jsonExcel.shift();\n      });\n      sheets.push(...jsonExcel);\n    });\n    console.log(sheets);\n    setTableData(sheets);\n  };\n  const uploadData = () => {\n    tableData?.map((data, i) => {\n      axios.post(\n        \"https://finance.miratsoneservices.com/api/create-bank-transaction\",\n        {\n          transaction_id: data?.__EMPTY,\n          value_date: formatDate(data?.__EMPTY_2),\n          txn_posted_date: data?.__EMPTY_2,\n          Cheque_No: data?.__EMPTY_3,\n          Description: data?.__EMPTY_4,\n          Cr_Dr: data?.__EMPTY_5,\n          transaction_amount: data?.__EMPTY_6,\n          available_balance: data?.__EMPTY_7,\n        }\n      );\n    });\n  };\n  console.log(exceldata);\n  // console.log(\n  //   new Date(tableData[0]?.__EMPTY_2?.split(\" \")[0])?.toLocaleDateString(\n  //     \"en-us\",\n  //     { weekday: \"long\", year: \"numeric\", month: \"short\", day: \"numeric\" }\n  //   )\n  // );\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleChange} />\n      <button onClick={uploadData}>Push</button>\n      <table>\n        <thead>\n          <th>No.</th>\n          <th>Transaction ID</th>\n          <th>Value Date</th>\n          <th>Txn Posted Date</th>\n          <th>ChequeNo.</th>\n          <th>Description</th>\n          <th>Cr/Dr</th>\n          <th>Transaction Amount(INR)</th>\n          <th>Available Balance(INR)</th>\n        </thead>\n        <tbody>\n          {tableData?.map((data) => (\n            <tr>\n              <td> {data?.[\"DETAILED STATEMENT\"]}</td>\n              <td>{data.__EMPTY}</td>\n              <td>\n                {/* {new Date(data?.__EMPTY_2)?.toLocaleDateString(\"en-GB\", {\n                  weekday: \"long\",\n                  year: \"numeric\",\n                  month: \"long\",\n                  day: \"numeric\",\n                })} */}\n                {formatDate(data?.__EMPTY_2)}\n              </td>\n              {/* <td>{data?.__EMPTY_2?.slice(\" \")[0]}</td> */}\n              <td>{data.__EMPTY_2}</td>\n              <td>{data.__EMPTY_3}</td>\n              <td>{data.__EMPTY_4}</td>\n              <td>{data.__EMPTY_5}</td>\n              <td>{data.__EMPTY_6}</td>\n              <td>{data.__EMPTY_7}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Convert;\n"],"names":["useState","tableData","setTableData","exceldata","formatDate","date","split","Date","toString","handleChange","e","file","target","files","arrayBuffer","data","wb","read","console","log","Sheets","SheetNames","sheets","map","shName","i","Object","entries","ind","jsonExcel","utils","shift","push","type","onChange","onClick","axios","transaction_id","__EMPTY","value_date","__EMPTY_2","txn_posted_date","Cheque_No","__EMPTY_3","Description","__EMPTY_4","Cr_Dr","__EMPTY_5","transaction_amount","__EMPTY_6","available_balance","__EMPTY_7"],"sourceRoot":""}